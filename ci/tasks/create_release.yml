---
platform: linux

image_resource:
  type: docker-image
  source:
    repository: czero/cflinuxfs2

inputs:
- name: pcf-pipelines
- name: version
- name: fly

outputs:
- name: pcf-pipelines-release-tarball
- name: pivnet-metadata

params:
  AVAILABILITY: Admins Only

run:
  path: bash
  args:
  - -c
  - |
    set -o pipefail
    set -eu

    chmod +x fly/fly
    export PATH="$PWD/fly":$PATH

    root=$PWD

    # Create upgrade-ert pipeline from upgrade-tile pipeline
    pushd pcf-pipelines
      mkdir -p upgrade-ert

      sed \
        -e 's/^product_slug:/# product_slug:/' \
        -e 's/^product_name:/# product_name:/' \
        upgrade-tile/params.yml > upgrade-ert/params.yml

      cat ci/yaml_license_header <(
        cat upgrade-tile/pipeline.yml | yaml_patch_linux -o operations/create-upgrade-ert-pipeline.yml
      ) > upgrade-ert/pipeline.yml
    popd

    # Switch pcf-pipelines to point at Pivnet release of pcf-pipelines instead
    # of GitHub
    version=v$(cat version/version)

    set +e # read -d '' requires this
    read -r -d '' hardcode_pivnet_version <<EOF
    - op: replace
      path: /resources/name=pcf-pipelines-tarball/source/product_version
      value: $version
    EOF
    set -e

    files=$(
      find pcf-pipelines \
      -type f \
      -name pipeline.yml \
      -exec grep -l "get: pcf-pipelines" {} \; |
      grep -v ci/pipeline.yml
    )

    for f in ${files[@]}; do
      cat $f |
      yaml_patch_linux \
        -o pcf-pipelines/operations/use-pivnet-release.yml \
        -o <(echo "$hardcode_pivnet_version") \
        > $f.bk
      mv $f.bk $f

      fly fmt --write --config $f

      # Remove git_private_key from params as it is no longer needed
      params_file=$(dirname $f)/params.yml
      sed -i -e '/git_private_key:/d' $params_file
    done

    # Create offline install-pcf/vsphere pipeline
    mkdir -p pcf-pipelines/install-pcf/vsphere/offline
    cat > steamroll_config.yml <<EOF
    resource_map:
      "pcf-pipelines": $root/pcf-pipelines
    EOF
    steamroll -p pcf-pipelines/install-pcf/vsphere/pipeline.yml -c steamroll_config.yml |
    yaml_patch_linux \
      -o pcf-pipelines/operations/create-install-pcf-vsphere-offline-pipeline.yml \
      > vsphere-offline.yml

    fly fmt -c vsphere-offline.yml > pcf-pipelines/install-pcf/vsphere/offline/pipeline.yml
    cp pcf-pipelines/install-pcf/vsphere{,/offline}/params.yml
    sed -i \
      -e '/pivnet_token:/d' \
      -e '/ert_major_minor_version:/d' \
      -e '/opsman_major_minor_version:/d' \
      -e '/company_proxy_domain:/d' \
      pcf-pipelines/install-pcf/vsphere/offline/params.yml
    cat >> pcf-pipelines/install-pcf/vsphere/offline/params.yml <<EOF

    # offline resource config
    s3_endpoint:
    s3_bucket:
    s3_access_key_id:
    s3_secret_access_key:
    EOF

    # Create release metadata
    release_date=$(date +%Y-%m-%d)

    cat >> pivnet-metadata/metadata.yml <<EOF
    ---
    release:
      version: "${version}"
      release_date: "${release_date}"
      release_notes_url: "https://github.com/pivotal-cf/pcf-pipelines/releases"
      description: |
        Concourse Pipeline Templates and Scripts for PCF Platform Ops Automation
      availability: $AVAILABILITY
      release_type: Beta Release
      eula_slug: "pivotal_beta_eula"
      eccn: "5D002"
      license_exception: "TSU"
      user_group_ids:
      - 6   # Pivotal Internal Early Access
      - 159 # C[0] PCF Automation Pipelines Access
      - 64  #| Pivotal SI Partners Known and Potential Partners. 
    EOF

    exclusions="--exclude .git* --exclude ci --exclude *.go"
    if [[ "$AVAILABILITY" != "Admins Only" ]]; then
      exclusions+=" --exclude download-offline-resources --exclude install-pcf/vsphere/offline"
    fi

    # Create release tarball
    tar \
      $exclusions \
      --create \
      --gzip \
      --file pcf-pipelines-release-tarball/pcf-pipelines-$version.tgz \
      pcf-pipelines
